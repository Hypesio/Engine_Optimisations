#version 450

layout(local_size_x = 8, local_size_y = 8) in;

#include "utils.glsl"
#define max_layers 14

layout(binding = 0) uniform sampler2D in_color;
layout(r32ui, binding = 1) uniform uimage2D head_texture;
layout(binding = 2) uniform writeonly image2D out_image;
layout(rgba32ui, binding = 0) uniform uimageBuffer data_list;

void order_list(uvec4 list[max_layers], uint size)
{
    // Simple bubble sort for the moment
    uint i, j;
    for (i = 0; i < size - 1; i++)
    {
        // Last i elements are already
        // in place
        for (j = 0; j < size - i - 1; j++) 
        {
            if (list[j].z < list[j + 1].z)
            {
                uvec4 tmp = list[j]; 
                list[j] = list[j + 1]; 
                list[j + 1] = tmp;
            }
        }
    }
}

void insertion_sort(uvec4 list[max_layers], uint size, uvec4 element)
{
    for (uint i = 0; i < size; i++)
    {
        if (list[i].z < element.z)
        {
            uvec4 prev = list[i];
            list[i] = element;
            for (uint j = i + 1; j < size; j++)
            {
                uvec4 tmp = list[j];
                list[j] = prev; 
                prev = tmp;
            }
        }
    }
}

void main()
{
    // Get the tail of the list
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    uint idx = imageLoad(head_texture, coord).x;
    //vec4 color = vec4(idx, idx, idx, 1.0);
    //imageStore(out_image, coord, color);
    //return;

    if (idx > 0) // No transparency element on this pixel
    {
        // Build the full list
        uvec4 full_list[max_layers];
        uint list_id = 0;

        while (idx > 0 && list_id < max_layers)
        {
            uvec4 node_infos = imageLoad(data_list, int(idx));
            full_list[list_id++] = node_infos; 
            idx = node_infos.w;
        }
        uint size = list_id;

        // Sort the list
        //order_list(full_list, size);

        // Insertion sort all the remaining elements in list
        /*while(idx > 0)
        {
            uvec4 to_add = data_list[idx];
            insertion_sort(full_list, max_layers, to_add);
            idx = int(to_add.w);
        }*/

        // Blend all values
        //uvec4 node_infos = full_list[1];
        //vec4 node_color = vec4(unpackHalf2x16(node_infos.x), unpackHalf2x16(node_infos.y));
        //if (node_color.x == 0)
        //    node_color = vec4(1.0, 1.0, 1.0, 1.0);
        vec4 color = texelFetch(in_color, coord, 0);// + node_color;
        uint id = 0;
        while (id < size)
        {
            // Simple additive blending -- Should be alpha blending for better result
            uvec4 node_infos = full_list[id++];
            vec4 node_color = vec4(unpackHalf2x16(node_infos.x), unpackHalf2x16(node_infos.y));
            color += node_color;
        }

        imageStore(out_image, coord, color);
    }
    else 
    {
        vec4 color = texelFetch(in_color, coord, 0);
        imageStore(out_image, coord, color);
    }

    
}
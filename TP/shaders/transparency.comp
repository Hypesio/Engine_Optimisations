#version 450

layout(local_size_x = 8, local_size_y = 8) in;

#include "utils.glsl"
#define max_layers 14

layout(binding = 0) uniform sampler2D in_color;
layout(r32ui, binding = 1) uniform uimage2D head_texture;
layout(binding = 2) uniform writeonly image2D out_image;
layout(rgba32ui, binding = 0) uniform uimageBuffer data_list;

vec4 blend(vec4 src, vec4 over)
{
    float alpha = src.a + over.a * (1.0 - src.a); 
    vec3 color = (src.rgb * src.a + over.rgb * over.a * (1.0 - src.a)) / alpha; 
    return vec4(color, alpha);
}

void main()
{
    // Get the tail of the list
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    uint idx = imageLoad(head_texture, coord).x;

    if (idx > 0) // No transparency element on this pixel
    {
        // Build the full list
        uvec4 full_list[max_layers];
        uint list_id = 0;

        while (idx > 0 && list_id < max_layers)
        {
            uvec4 node_infos = imageLoad(data_list, int(idx));
            full_list[list_id++] = node_infos; 
            idx = node_infos.w;
        }
        uint size = list_id;

        // Sort the list
        for (uint i = 0; i < size - 1; i++)
        {
            for (uint j = 0; j < size - i - 1; j++) 
            {
                if (full_list[j].z < full_list[j + 1].z)
                {
                    uvec4 tmp = full_list[j]; 
                    full_list[j] = full_list[j + 1]; 
                    full_list[j + 1] = tmp;
                }
            }
        }

        // Insertion sort all the remaining elements in list
        while(idx > 0)
        {
            uvec4 to_add = imageLoad(data_list, int(idx));

            for (uint i = 0; i < size; i++)
            {
                if (full_list[i].z < to_add.z)
                {
                    uvec4 prev = full_list[i];
                    full_list[i] = to_add;
                    for (uint j = i + 1; j < size; j++)
                    {
                        uvec4 tmp = full_list[j];
                        full_list[j] = prev; 
                        prev = tmp;
                    }
                }
            }
            idx = int(to_add.w);
        }

        // Blend all values
        vec4 color = texelFetch(in_color, coord, 0);
        uint id = 0;
        while (id < size)
        {
            uvec4 node_infos = full_list[id++];
            vec4 node_color = vec4(unpackHalf2x16(node_infos.x), unpackHalf2x16(node_infos.y));
            color = blend(node_color, color);
        }

        imageStore(out_image, coord, color);
    }
    else 
    {
        vec4 color = texelFetch(in_color, coord, 0);
        imageStore(out_image, coord, color);
    }

}